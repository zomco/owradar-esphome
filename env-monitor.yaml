substitutions:
  devicename: envmon
  upper_devicename: EnvMon

esphome:
  name: $devicename
  includes:
    - GP2Y1010AU0F.h
    - LD2410.h
    - RGBCalc.h

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "0nFrfzxfR86aJlKBz8UJ+I/v9+jzp1Xb8X/6K/iB954="

ota:
  password: "de66b76db75abcfb03ae21314cd950d1"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Env-Monitor Fallback Hotspot"
    password: "7bqceQpZUOas"

captive_portal:

http_request:
  useragent: esphome/device
  timeout: 10s
  id: http_request_data

i2c:
  - id: i2c1
    sda: 21
    scl: 22
    scan: true
  - id: i2c2
    sda: 18
    scl: 19
    scan: true

uart:
  id: uart1
  tx_pin: 16
  rx_pin: 17
  baud_rate: 256000
  parity: NONE
  stop_bits: 1

custom_component:
  - lambda: |-
      return {new LD2410(id(uart1))};
    components:
      - id: ld2410
  - lambda: |-
      return {new RGBCalc()};
    components:
      - id: rgbcalc

binary_sensor:    
  - platform: gpio
    pin: 
      number: 0
      mode:
        input: true
        pullup: true
    name: ${upper_devicename} DS-2SC1Q140IY Shield Button
    on_press:
      then:
        - switch.toggle: shield_switch

  - platform: custom
    lambda: |-
      auto uart_component = static_cast<LD2410 *>(ld2410);
      return {uart_component->hasTarget,uart_component->hasMovingTarget,uart_component->hasStillTarget};
    binary_sensors:
      - name: ${upper_devicename} LD2410 Target
      - name: ${upper_devicename} LD2410 Moving Target
      - name: ${upper_devicename} LD2410 Still Target

  - platform: gpio
    pin: 23
    name: ${upper_devicename} PIR

switch:
  - platform: gpio
    pin:
      number: 25
    name: ${upper_devicename} DS-2SC1Q140IY Shield Switch
    id: "shield_switch"
    on_turn_on:
      then:
        - http_request.send:
            method: PUT
            url: http://admin:th82201806.@192.168.68.232:80/ISAPI/PTZCtrl/channels/1/presets/2/goto
    on_turn_off:
      then:
        - http_request.send:
            method: PUT
            url: http://admin:th82201806.@192.168.68.232:80/ISAPI/PTZCtrl/channels/1/presets/1/goto

sensor:
  - platform: custom
    lambda: |-
      auto dust_sensor = new GP2Y1010AU0F();
      App.register_component(dust_sensor);
      return {dust_sensor};
    sensors:
      name: ${upper_devicename} GP2Y1010AU0F Dust Density
      accuracy_decimals: 2
      unit_of_measurement: "µg/m³"
      on_value:
        then:
          - http_request.post:
              url: http://192.168.68.170/json/state
              headers:
                Content-Type: application/json
              on_response:
                then:
                  - lambda: |-
                      json::parse_json(id(http_request_data).get_string(), [](JsonObject root) {
                          ESP_LOGI("main", "Update Dust Density Response: %d", root["success"].as<bool>());
                      });
              json: |-
                  const JsonArray &segs = root.createNestedArray("seg");
                  const JsonObject &seg = segs.createNestedObject();
                  const JsonArray &cols = seg.createNestedArray("col");
                  const JsonArray &pri = cols.createNestedArray();
                  const JsonArray &bg = cols.createNestedArray();
                  const JsonArray &ter = cols.createNestedArray();
                  static int dust_density_i = 0;
                  seg["id"] = dust_density_i;
                  rgb_t rgb = {0, 0, 0};
                  double wave_len = 380 + x / 3.0;
                  wave_len = wave_len > 780 ? 780 : wave_len;
                  auto rgb_component = static_cast<RGBCalc *>(rgbcalc);
                  if (rgb_component->calc(wave_len, &rgb) == 0) {
                    ESP_LOGI("main", "Convert Wave Length %f To RGB (%d,%d,%d)", wave_len, rgb.r, rgb.g, rgb.b);
                  } else {
                    ESP_LOGI("main", "Convert Wave Length %f Failed)", wave_len);
                  }
                  bg[0] = rgb.r;
                  bg[1] = rgb.g;
                  bg[2] = rgb.b;
                  ESP_LOGI("main", "Update %d Dust Density: %f, %f", dust_density_i, x, wave_len);
                  dust_density_i += 1;
                  dust_density_i %= 6;

  - platform: bh1750
    name: ${upper_devicename} BH1750 Illuminance
    address: 0x23
    update_interval: 3s
    i2c_id: i2c1
    on_value:
      then:
        - http_request.post:
            url: http://192.168.68.170/json/state
            headers:
              Content-Type: application/json
            on_response:
              then:
                - lambda: |-
                    json::parse_json(id(http_request_data).get_string(), [](JsonObject root) {
                        ESP_LOGI("main", "Update Illuminance Response: %d", root["success"].as<bool>());
                    });
            json: |-
                const JsonArray &segs = root.createNestedArray("seg");
                const JsonObject &seg = segs.createNestedObject();
                static int illuminance_i = 0;
                seg["id"] = illuminance_i;
                int v = x < 64 ? (64 - x) / 64 * 256 : 0;
                seg["bri"] = v;
                ESP_LOGI("main", "Update %d Illuminance: %d", illuminance_i, v);
                illuminance_i += 1;
                illuminance_i %= 6;

  - platform: aht10
    temperature:
      name: ${upper_devicename} AHT10 Temperature
    humidity:
      name: ${upper_devicename} AHT10 Humidity
    update_interval: 3s
    i2c_id: i2c2

  - platform: custom
    lambda: |-
      auto uart_component = static_cast<LD2410 *>(ld2410);
      return {uart_component->movingTargetDistance,uart_component->movingTargetEnergy,uart_component->stillTargetDistance,uart_component->stillTargetEnergy,uart_component->detectDistance};
    sensors:
      - name: ${upper_devicename} LD2410 Moving Target Distance
        id: moving_target_distance
        unit_of_measurement: "cm"
        accuracy_decimals: 0
      - name: ${upper_devicename} LD2410 Moving Target Energy
        id: moving_target_energy
        unit_of_measurement: "%"
        accuracy_decimals: 0
      - name: ${upper_devicename} LD2410 Still Target Distance
        id: still_target_distance
        unit_of_measurement: "cm"
        accuracy_decimals: 0
      - name: ${upper_devicename} LD2410 Still Target Energy
        id: still_target_energy
        unit_of_measurement: "%"
        accuracy_decimals: 0
      - name: ${upper_devicename} LD2410 Target Distance
        id: detect_distance
        unit_of_measurement: "cm"
        accuracy_decimals: 0
    